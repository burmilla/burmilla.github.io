<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced on BurmillaOS</title><link>https://burmillaos.org/docs/configuration/advanced/</link><description>Recent content in Advanced on BurmillaOS</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://burmillaos.org/docs/configuration/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Disabling Access to BurmillaOS</title><link>https://burmillaos.org/docs/configuration/advanced/disable-access-to-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/disable-access-to-system/</guid><description>Disabling Access to BurmillaOS # In BurmillaOS, you can set rancher.password as a kernel parameter and auto-login to be enabled, but there may be some cases where we want to disable both of these options. Both of these options can be disabled in the cloud-config or as part of a ros command.
How to Disabling Options # If BurmillaOS has already been started, you can use ros config set to update that you want to disable</description></item><item><title>Resizing a Device Partition</title><link>https://burmillaos.org/docs/configuration/advanced/resizing-device-partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/resizing-device-partition/</guid><description>Resizing a Device Partition # The resize_device cloud config option can be used to automatically extend the first partition (assuming its ext4) to fill the size of it&amp;rsquo;s device.
Once the partition has been resized to fill the device, a /var/lib/rancher/resizefs.done file will be written to prevent the resize tools from being run again. If you need it to run again, delete that file and reboot.
#cloud-config rancher: resize_device: /dev/sda This behavior is the default when launching BurmillaOS on AWS.</description></item><item><title>Running Commands</title><link>https://burmillaos.org/docs/configuration/advanced/running-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/running-commands/</guid><description>Running Commands # You can automate running commands on boot using the runcmd cloud-config directive. Commands can be specified as either a list or a string. In the latter case, the command is executed with sh.
#cloud-config runcmd: - [ touch, /home/rancher/test1 ] - echo &amp;#34;test&amp;#34; &amp;gt; /home/rancher/test2 Commands specified using runcmd will be executed within the context of the console container.
Running Docker commands # When using runcmd, BurmillaOS will wait for all commands to complete before starting Docker.</description></item><item><title>Sysctl Settings</title><link>https://burmillaos.org/docs/configuration/advanced/sysctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/sysctl/</guid><description>Sysctl Settings # The rancher.sysctl cloud-config key can be used to control sysctl parameters. This works in a manner similar to /etc/sysctl.conf for other Linux distros.
#cloud-config rancher: sysctl: net.ipv4.conf.default.rp_filter: 1 You can either add these settings to your cloud-init.yml, or use sudo ros config merge -i somefile.yml to merge settings into your existing system.</description></item><item><title>Writing Files</title><link>https://burmillaos.org/docs/configuration/advanced/write-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/write-files/</guid><description>Writing Files # You can automate writing files to disk using the write_files cloud-config directive.
#cloud-config write_files: - path: /etc/rc.local permissions: &amp;#34;0755&amp;#34; owner: root content: |#!/bin/bash echo &amp;#34;I&amp;#39;m doing things on start&amp;#34; Writing Files in Specific System Services # By default, the write_files directive will create files in the console container. To write files in other system services, the container key can be used. For example, the container key could be used to write to /etc/ntp.</description></item><item><title/><link>https://burmillaos.org/docs/configuration/advanced/microcode-loader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/microcode-loader/</guid><description>How to update microcode # Processor manufacturers release stability and security updates to the processor microcode. While microcode can be updated through the BIOS, the Linux kernel is also able to apply these updates. These updates provide bug fixes that can be critical to the stability of your system. Without these updates, you may experience spurious crashes or unexpected system halts that can be difficult to track down.
The microcode loader supports three loading methods:</description></item><item><title/><link>https://burmillaos.org/docs/configuration/advanced/airgap-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/airgap-configuration/</guid><description>Air Gap Configuration # In the air gap environment, the Docker registry, BurmillaOS repositories URL, and the BurmillaOS upgrade URL should be configured to ensure the OS can pull images, update OS services, and upgrade the OS.
Configuring a Private Docker Registry # You should use a private Docker registry so that user-docker and system-docker can pull images.
Add the private Docker registry domain to the images prefix.</description></item></channel></rss>