<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BurmillaOS</title><link>https://burmillaos.org/</link><description>Recent content on BurmillaOS</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://burmillaos.org/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://burmillaos.org/docs/quick-start-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/quick-start-guide/</guid><description>Quick Start # If you have a specific BurmillaOS machine requirements, please check out our guides on running BurmillaOS. With the rest of this guide, we&amp;rsquo;ll start up a BurmillaOS using Docker machine and show you some of what BurmillaOS can do.
Launching BurmillaOS using Docker Machine # Before moving forward, you&amp;rsquo;ll need to have Docker Machine and VirtualBox installed. Once you have VirtualBox and Docker Machine installed, it&amp;rsquo;s just one command to get BurmillaOS running.</description></item><item><title/><link>https://burmillaos.org/docs/storage/custom-partition-layout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/storage/custom-partition-layout/</guid><description>How to custom partition layout # When users use the default ros install, ROS will automatically create one partition on the root disk. It will be the only partition with the label RANCHER_STATE. But sometimes users want to be able to customize the root disk partition to isolate the data.
The following defaults to MBR mode, GPT mode has not been tested.
Partions # RANCHER_STATE # As mentioned above, the default mode is that ROS will automatically create one partition with the label RANCHER_STATE.</description></item><item><title>Amazon EC2</title><link>https://burmillaos.org/docs/installation/cloud/aws-ec2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/aws-ec2/</guid><description>Amazon EC2 # BurmillaOS is available as an Amazon Web Services AMI, and can be easily run on EC2. You can launch BurmillaOS either using the AWS Command Line Interface (CLI) or using the AWS console.
Launching BurmillaOS through the AWS CLI # If you haven&amp;rsquo;t installed the AWS CLI, follow the instructions on the AWS CLI page to install the CLI and configure access key and secret keys.</description></item><item><title>Amazon ECS</title><link>https://burmillaos.org/docs/installation/cloud/amazon-ecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/amazon-ecs/</guid><description>Amazon ECS (EC2 Container Service) # Amazon ECS is supported, which allows BurmillaOS EC2 instances to join your cluster.
Pre-Requisites # Prior to launching BurmillaOS EC2 instances, the ECS Container Instance IAM Role will need to have been created. This ecsInstanceRole will need to be used when launching EC2 instances. If you have been using ECS, you created this role if you followed the ECS &amp;ldquo;Get Started&amp;rdquo; interactive guide.</description></item><item><title>Consoles</title><link>https://burmillaos.org/docs/configuration/base/switching-consoles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/base/switching-consoles/</guid><description>Consoles # When booting from the ISO, BurmillaOS starts with the default console, which is based on busybox.
You can select which console you want BurmillaOS to start with using the cloud-config.
Enabling Consoles using Cloud-Config # When launching BurmillaOS with a cloud-config file, you can select which console you want to use.
Currently, the list of available consoles are:
default (debian) Here is an example cloud-config file that can be used to enable the debian console.</description></item><item><title>Date and time zone</title><link>https://burmillaos.org/docs/configuration/base/date-and-timezone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/base/date-and-timezone/</guid><description>Date and time zone # Host system # The default console keeps time in the Coordinated Universal Time (UTC) zone and synchronizes clocks with the Network Time Protocol (NTP). The Network Time Protocol daemon (ntpd) is an operating system program that maintains the system time in synchronization with time servers using the NTP.
Changing the timezone in the default console can be for example done using a system-wide environment variable /etc/environment</description></item><item><title>Disabling Access to BurmillaOS</title><link>https://burmillaos.org/docs/configuration/advanced/disable-access-to-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/disable-access-to-system/</guid><description>Disabling Access to BurmillaOS # In BurmillaOS, you can set rancher.password as a kernel parameter and auto-login to be enabled, but there may be some cases where we want to disable both of these options. Both of these options can be disabled in the cloud-config or as part of a ros command.
How to Disabling Options # If BurmillaOS has already been started, you can use ros config set to update that you want to disable</description></item><item><title>Images prefix</title><link>https://burmillaos.org/docs/configuration/docker/images-prefix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/docker/images-prefix/</guid><description>Images prefix # When you have built your own docker registries, and have cached the burmilla/os and other os-services images, something like a normal docker pull burmilla/os can be cached as docker pull dockerhub.mycompanyname.com/docker.io/burmilla/os.
However, you need a way to inject a prefix into BurmillaOS for installation or service pulls. BurmillaOS supports a global prefix you can add to force ROS to always use your mirror.
You can config a global image prefix:</description></item><item><title>Kernel boot parameters</title><link>https://burmillaos.org/docs/configuration/kernel/adding-kernel-parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/kernel/adding-kernel-parameters/</guid><description>Kernel boot parameters # BurmillaOS parses the Linux kernel boot cmdline to add any keys it understands to its configuration. This allows you to modify what cloud-init sources it will use on boot, to enable rancher.debug logging, or to almost any other configuration setting.
There are two ways to set or modify persistent kernel parameters, in-place (editing the file and reboot) or during installation to disk.
In-place editing # Available as of RancherOS v1.</description></item><item><title>Loading Kernel Modules</title><link>https://burmillaos.org/docs/configuration/kernel/loading-kernel-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/kernel/loading-kernel-modules/</guid><description>Loading Kernel Modules # Since BurmillaOS v0.8, we build our own kernels using an unmodified kernel.org LTS kernel. We provide both loading kernel modules with parameters and loading extra kernel modules for you.
Loading Kernel Modules with parameters # The rancher.modules can help you to set kernel modules or module parameters.
As an example, I&amp;rsquo;m going to set a parameter for kernel module ndb
$ sudo ros config set rancher.</description></item><item><title>Private Registries</title><link>https://burmillaos.org/docs/configuration/docker/private-registries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/docker/private-registries/</guid><description>Private Registries # When launching services through a cloud-config, it is sometimes necessary to pull a private image from DockerHub or from a private registry. Authentication for these can be embedded in your cloud-config.
For example, to add authentication for DockerHub:
#cloud-config rancher: registry_auths: https://index.docker.io/v1/: auth: dXNlcm5hbWU6cGFzc3dvcmQ= The auth key is generated by base64 encoding a string of the form username:password. The docker login command can be used to generate an auth key.</description></item><item><title>Resizing a Device Partition</title><link>https://burmillaos.org/docs/configuration/advanced/resizing-device-partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/resizing-device-partition/</guid><description>Resizing a Device Partition # The resize_device cloud config option can be used to automatically extend the first partition (assuming its ext4) to fill the size of it&amp;rsquo;s device.
Once the partition has been resized to fill the device, a /var/lib/rancher/resizefs.done file will be written to prevent the resize tools from being run again. If you need it to run again, delete that file and reboot.
#cloud-config rancher: resize_device: /dev/sda This behavior is the default when launching BurmillaOS on AWS.</description></item><item><title>Running Commands</title><link>https://burmillaos.org/docs/configuration/advanced/running-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/running-commands/</guid><description>Running Commands # You can automate running commands on boot using the runcmd cloud-config directive. Commands can be specified as either a list or a string. In the latter case, the command is executed with sh.
#cloud-config runcmd: - [ touch, /home/rancher/test1 ] - echo &amp;#34;test&amp;#34; &amp;gt; /home/rancher/test2 Commands specified using runcmd will be executed within the context of the console container.
Running Docker commands # When using runcmd, BurmillaOS will wait for all commands to complete before starting Docker.</description></item><item><title>Setting the Hostname</title><link>https://burmillaos.org/docs/configuration/base/hostname/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/base/hostname/</guid><description>Setting the Hostname # You can set the hostname of the host using cloud-config. The example below shows how to configure it.
#cloud-config hostname: myhost</description></item><item><title>Setting up Docker TLS</title><link>https://burmillaos.org/docs/configuration/docker/setting-up-docker-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/docker/setting-up-docker-tls/</guid><description>Setting up Docker TLS # ros tls generate is used to generate both the client and server TLS certificates for Docker.
Remember, all ros commands need to be used with sudo or as a root user.
End to end example # Enable TLS for Docker and Generate Server Certificate # To have docker secured by TLS you need to set rancher.docker.tls to true, and generate a set of server and client keys and certificates:</description></item><item><title>SSH Settings</title><link>https://burmillaos.org/docs/configuration/base/ssh-keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/base/ssh-keys/</guid><description>SSH Settings # BurmillaOS supports adding SSH keys through the cloud-config file. Within the cloud-config file, you simply add the ssh keys within the ssh_authorized_keys key.
#cloud-config ssh_authorized_keys: - ssh-rsa AAA...ZZZ example1@burmilla - ssh-rsa BBB...ZZZ example2@burmilla When we pass the cloud-config file during the ros install command, it will allow these ssh keys to be associated with the rancher user. You can ssh into BurmillaOS using the key.
$ ssh -i /path/to/private/key rancher@&amp;lt;ip-address&amp;gt; Please note that OpenSSH 7.</description></item><item><title>Switching Docker Versions</title><link>https://burmillaos.org/docs/configuration/docker/switching-docker-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/docker/switching-docker-versions/</guid><description>Switching Docker Versions # The version of User Docker used in BurmillaOS can be configured using a cloud-config file or by using the ros engine command.
Note: There are known issues in Docker when switching between versions. For production systems, we recommend setting the Docker engine only once using a cloud-config.
Available Docker engines # The ros engine list command can be used to show which Docker engines are available to switch to.</description></item><item><title>Sysctl Settings</title><link>https://burmillaos.org/docs/configuration/advanced/sysctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/sysctl/</guid><description>Sysctl Settings # The rancher.sysctl cloud-config key can be used to control sysctl parameters. This works in a manner similar to /etc/sysctl.conf for other Linux distros.
#cloud-config rancher: sysctl: net.ipv4.conf.default.rp_filter: 1 You can either add these settings to your cloud-init.yml, or use sudo ros config merge -i somefile.yml to merge settings into your existing system.</description></item><item><title>Users</title><link>https://burmillaos.org/docs/configuration/base/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/base/users/</guid><description>Users # Currently, we don&amp;rsquo;t support adding other users besides rancher.
You can add users in the console container, but these users will only exist as long as the console container exists. It only makes sense to add users in a persistent consoles.
If you want the console user to be able to ssh into BurmillaOS, you need to add them to the docker group.</description></item><item><title>Writing Files</title><link>https://burmillaos.org/docs/configuration/advanced/write-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/write-files/</guid><description>Writing Files # You can automate writing files to disk using the write_files cloud-config directive.
#cloud-config write_files: - path: /etc/rc.local permissions: &amp;#34;0755&amp;#34; owner: root content: |#!/bin/bash echo &amp;#34;I&amp;#39;m doing things on start&amp;#34; Writing Files in Specific System Services # By default, the write_files directive will create files in the console container. To write files in other system services, the container key can be used. For example, the container key could be used to write to /etc/ntp.</description></item><item><title/><link>https://burmillaos.org/docs/configuration/advanced/microcode-loader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/microcode-loader/</guid><description>How to update microcode # Processor manufacturers release stability and security updates to the processor microcode. While microcode can be updated through the BIOS, the Linux kernel is also able to apply these updates. These updates provide bug fixes that can be critical to the stability of your system. Without these updates, you may experience spurious crashes or unexpected system halts that can be difficult to track down.
The microcode loader supports three loading methods:</description></item><item><title/><link>https://burmillaos.org/docs/installation/upgrading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/upgrading/</guid><description>Upgrading # If BurmillaOS has released a new version and you want to learn how to upgrade your OS, we make it easy using the ros os command.
Since BurmillaOS is a kernel and initrd, the upgrade process is downloading a new kernel and initrd, and updating the boot loader to point to it. The old kernel and initrd are not removed. If there is a problem with your upgrade, you can select the old kernel from the Syslinux bootloader.</description></item><item><title>Configuration</title><link>https://burmillaos.org/docs/configuration/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/test/</guid><description/></item><item><title>FAQs</title><link>https://burmillaos.org/docs/faqs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/faqs/</guid><description>FAQs # What is required to run BurmillaOS? # BurmillaOS runs on any laptop, physical, or virtual servers.
What are some commands? # Command Description docker Good old Docker, use that to run stuff. system-docker The Docker instance running the system containers. Must run as root or using sudo ros Control and configure BurmillaOS How can I extend my disk size in Amazon?</description></item><item><title>Releases</title><link>https://burmillaos.org/docs/releases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/releases/</guid><description>Releases # The following is a list of the versions of the operating system in their different branches:
Stable # v2.0.0 | 2024-03-05 Old stable # v1.9.7-rc1 | 2023-02-01 v1.9.6 | 2023-01-02 Testing # Archived # v1.9.5 | 2022-09-15 v1.9.4 | 2022-03-10 v1.9.3 | 2021-10-12 v1.9.2 | 2021-08-04 v1.9.1 | 2021-02-02 v1.</description></item><item><title/><link>https://burmillaos.org/docs/additional-resources/recovery-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/additional-resources/recovery-console/</guid><description>How to use recovery console # Test Environment # In order to demonstrate how to use the recovery console, we choose a scene that the disk space is full and the OS cannot boot.
Term Definition BurmillaOS v2.0.0 Platform Virtualbox Root Disk 2GB CPU 1C MEM 2GB Fill up the disk # Start this VM to check disk usage:</description></item><item><title/><link>https://burmillaos.org/docs/additional-resources/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/additional-resources/security/</guid><description>BurmillaOS Security # Security policy # BurmillaOS is a minimal Linux distribution, built with entirely using open source components.
Reporting process # Please submit possible security issues by emailing olli.janatuinen@gmail.com
BurmillaOS Vulnerabilities # ID Description Date Resolution</description></item><item><title/><link>https://burmillaos.org/docs/configuration/advanced/airgap-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/advanced/airgap-configuration/</guid><description>Air Gap Configuration # In the air gap environment, the Docker registry, BurmillaOS repositories URL, and the BurmillaOS upgrade URL should be configured to ensure the OS can pull images, update OS services, and upgrade the OS.
Configuring a Private Docker Registry # You should use a private Docker registry so that user-docker and system-docker can pull images.
Add the private Docker registry domain to the images prefix.</description></item><item><title/><link>https://burmillaos.org/docs/configuration/kernel/kernel-modules-kernel-headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/configuration/kernel/kernel-modules-kernel-headers/</guid><description>Installing Kernel Modules that require Kernel Headers # To compile any kernel modules, you will need to download the kernel headers. The kernel headers are available in the form of a system service. Since the kernel headers are a system service, they need to be enabled using the ros service command.
Installing Kernel Headers # The following commands can be used to install kernel headers for usage by containers in Docker or System Docker.</description></item><item><title/><link>https://burmillaos.org/docs/installation/boot-process/cloud-init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/boot-process/cloud-init/</guid><description>Cloud Init # Userdata and metadata can be fetched from a cloud provider, VM runtime, or management service during the BurmillaOS boot process. Since v0.8.0, this process occurs while BurmillaOS is still running from memory and before System Docker starts. It is configured by the rancher.cloud_init.datasources configuration parameter. For cloud-provider specific images, such as AWS and GCE, the datasource is pre-configured.
Userdata # Userdata is a file given by users when launching BurmillaOS hosts.</description></item><item><title/><link>https://burmillaos.org/docs/installation/boot-process/image-preloading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/boot-process/image-preloading/</guid><description>Image Preloading # On boot, BurmillaOS scans /var/lib/rancher/preload/docker and /var/lib/rancher/preload/system-docker directories and tries to load container image archives it finds there, with docker load and system-docker load.
The archives are .tar files, optionally compressed with xz or gzip. These can be produced by docker save command, e.g.:
$ docker save my-image1 my-image2 some-other/image3 | xz &amp;gt; my-images.tar.xz The resulting files should be placed into /var/lib/rancher/preload/docker or /var/lib/rancher/preload/system-docker (depending on whether you want it preloaded into Docker or System Docker).</description></item><item><title/><link>https://burmillaos.org/docs/installation/boot-process/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/boot-process/logging/</guid><description>System Logging # System services # BurmillaOS uses containers for its system services. This means the logs for syslog, acipd, system-cron, udev, network, ntp, console and the user Docker are available using sudo ros service logs &amp;lt;service-name&amp;gt;.
Boot logging # Available as of RancherOS v1.1
The init process&amp;rsquo;s logs are copied to /var/log/boot after the user-space filesystem is made available. These can be used to diagnose initialisation, network, and cloud-init issues.</description></item><item><title/><link>https://burmillaos.org/docs/installation/cloud/aliyun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/aliyun/</guid><description>Aliyun # Adding the BurmillaOS Image into Aliyun # BurmillaOS is available as an image in Aliyun, and can be easily run in Elastic Compute Service (ECS). Let’s walk through how to upload the ECS image.
Download the most recent BurmillaOS image. The image burmillaos-aliyun.vhd can be found in the release artifacts. Follow Aliyun&amp;rsquo;s instructions on how to upload the image. Before the image can be added, it must be uploaded into an OSS bucket.</description></item><item><title/><link>https://burmillaos.org/docs/installation/cloud/azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/azure/</guid><description>Azure # Because BurmillaOS community is small we do not publish images in Azure. However, you can still use old RancherOS image and simply upgrade to BurmillaOS
Launching RancherOS through the Azure Portal # RancherOS has been published in Azure Marketplace, you can get it from here.
Using the new Azure Resource Management portal, click on Marketplace. Search for RancherOS. Click on Create.
Follow the steps to create a virtual machine.</description></item><item><title/><link>https://burmillaos.org/docs/installation/cloud/digital-ocean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/digital-ocean/</guid><description>Digital Ocean # BurmillaOS is available in the Digital Ocean portal. BurmillaOS is a member of container distributions and you can find it easily.
Note Deploying to Digital Ocean will incur charges.
To start a BurmillaOS Droplet on Digital Ocean:
In the Digital Ocean portal, go to the project view. Click New Droplet. Click Create Droplet. Click the Container distributions tab. Click BurmillaOS. Choose a plan. Make sure your Droplet has the minimum hardware requirements for BurmillaOS.</description></item><item><title/><link>https://burmillaos.org/docs/installation/custom-builds/custom-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/custom-builds/custom-console/</guid><description>Custom Console # When booting from the ISO, BurmillaOS starts with the default console, which is based on debian:buster-slim.
No other console is officially supported.
Using the unofficial custom console images # If you want to use other console, the most easy way is use the unofficial custom console images.
To use this, you need to add the following settings to your cloud-init.yml.
rancher: repositories: console: url: https://raw.githubusercontent.com/benok/burmilla-os-console/master With the settings above, you can select which console you want BurmillaOS to start with using the cloud-config.</description></item><item><title/><link>https://burmillaos.org/docs/installation/custom-builds/custom-kernels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/custom-builds/custom-kernels/</guid><description>Custom Kernels # Kernel version in BurmillaOS # BurmillaOS basically uses the standard Linux kernel, but we maintain a kernel config ourselves. Due to various feature support and security fixes, we are constantly updating the kernel version.
BurmillaOS Kernel =v2.0.x 5.9.x =v1.9.x 4.14.x Building and Packaging a Kernel to be used in BurmillaOS # We build the kernel for BurmillaOS at the os-kernel repository.</description></item><item><title/><link>https://burmillaos.org/docs/installation/server/install-to-disk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/server/install-to-disk/</guid><description>Installing to Disk # BurmillaOS comes with a simple installer that will install BurmillaOS on a given target disk. To install BurmillaOS on a new disk, you can use the ros install command. Before installing, you&amp;rsquo;ll need to have already booted BurmillaOS from ISO. Please be sure to pick the burmillaos.iso from our release page.
Installing BurmillaOS # The ros install command orchestrates the installation from the burmilla/os container.</description></item><item><title/><link>https://burmillaos.org/docs/installation/server/raspberry-pi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/server/raspberry-pi/</guid><description>Raspberry Pi # BurmillaOS releases include a Raspberry Pi image that can be found on our releases page. The official Raspberry Pi documentation contains instructions on how to install operating system images.
When installing, there is no ability to pass in a cloud-config. You will need to boot up, change the configuration and then reboot to apply those changes.
Currently, only Raspberry Pi 3 is tested and known to work.</description></item><item><title/><link>https://burmillaos.org/docs/installation/workstation/apple-silicon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/workstation/apple-silicon/</guid><description>Apple Silicon # On MacOS, particularly on Apple Silicon (M1, M2, M3, &amp;hellip;), BurmillaOS can be tested using UTM. To run BurmillaOS on UTM, create a new virtual machine using &amp;ldquo;Emulate&amp;rdquo; CPU, for a &amp;ldquo;Linux&amp;rdquo; operating system, and set the CPU architecture to &amp;ldquo;x86_64&amp;rdquo;. Make sure to disable UEFI Boot and use the virtio-vga display card emulation in the settings.</description></item><item><title/><link>https://burmillaos.org/docs/installation/workstation/boot-from-iso/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/workstation/boot-from-iso/</guid><description>Booting from ISO # The BurmillaOS ISO file can be used to create a fresh BurmillaOS install on KVM, VMware, VirtualBox, Hyper-V, Proxmox VE, or bare metal servers. You can download the burmillaos.iso file from our releases page.
Some hypervisors may require a built-in agent to communicate with the guest, for this, BurmillaOS precompiles some ISO files.
Hypervisor ISO VMware burmillaos-vmware.iso Hyper-V burmillaos-hyperv.</description></item><item><title/><link>https://burmillaos.org/docs/installation/workstation/docker-machine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/workstation/docker-machine/</guid><description>Using Docker Machine # Before we get started, you&amp;rsquo;ll need to make sure that you have docker machine installed. Download it directly from the docker machine releases. You also need to know the memory requirements.
Note: If you create a BurmillaOS instance using Docker Machine, you will not be able to upgrade your version of BurmillaOS.
Downloading BurmillaOS # Get the latest ISO artifact from the BurmillaOS releases.</description></item><item><title/><link>https://burmillaos.org/docs/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/reference/</guid><description>Reference # ros Commands # Commands / Options Description Example  --version / -v print the version ros -v  --help / -h show help ros -h os operating system upgrade/downgrade see below config configure settings see below console manage which console container is used see below install install BurmillaOS to disk see below engine manage which Docker engine is used see below service see below tls setup tls configuration see below ros os Sub-Commands # Commands / Options Description Example version show the currently installed version ros os version list list the current available versions ros os list  --update / -u update engine cache ros os list --update upgrade upgrade to the latest version ros os upgrade  --image / -i upgrade to a certain image ros os upgrade --image value  --stage / -s only stage the new upgrade, don&amp;rsquo;t apply it ros os upgrade --stage  --force / -f do not prompt for input ros os upgrade --force  --kexec / -k reboot using kexec ros os upgrade --kexec  --no-reboot do not reboot after update ros os upgrade --no-reboot  --append append additional kernel parameters ros os upgrade --append value  --upgrade-console upgrade console even if persistent ros os upgrade --upgrade-console  --debug run installer with debug output ros os upgrade --debug ros config Sub-Commands # Commands / Options Description Example get get value ros config get value set set a value ros config set value images list Docker images for a configuration from a file ros config images  --input / -i file from which to read config ros config images --input value generate generate a configuration file from a template ros config generate merge merge configuration from stdin ros config merge  --input / -i file from which to read ros config merge --input value export export configuration ros config export  --output / -o file to which to save ros config export --output value  --private / -p include the generated private keys ros config export --private  --full / -f export full configuration, including internal and default settings ros config export --full validate validate configuration form stdin ros config validate  --input / -i file from which to read ros config validate --input value syslinux edit Syslinux boot global.</description></item><item><title/><link>https://burmillaos.org/docs/storage/additional-mounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/storage/additional-mounts/</guid><description>Additional Mounts # Additional mounts can be specified as part of your cloud-config. These mounts are applied within the console container. Here&amp;rsquo;s a simple example that mounts /dev/vdb to /mnt/s.
#cloud-config mounts: - [&amp;#34;/dev/vdb&amp;#34;, &amp;#34;/mnt/s&amp;#34;, &amp;#34;ext4&amp;#34;, &amp;#34;&amp;#34;] Important: Be aware, the 4th parameter is mandatory and cannot be omitted (server crashes). It also yet cannot be defaults
As you will use the ros cli most probably, it would look like this:</description></item><item><title/><link>https://burmillaos.org/docs/storage/state-partition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/storage/state-partition/</guid><description>Persistent State Partition # BurmillaOS will store its state in a single partition specified by the dev field. The field can be a device such as /dev/sda1 or a logical name such LABEL=state or UUID=123124. The default value is LABEL=RANCHER_STATE. The file system type of that partition can be set to auto or a specific file system type such as ext4.
#cloud-config rancher: state: fstype: auto dev: LABEL=RANCHER_STATE For other labels such as RANCHER_BOOT and BURMILLA_OEM and BURMILLA_SWAP, please refer to Custom partition layout.</description></item><item><title/><link>https://burmillaos.org/docs/system-services/custom-system-services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/system-services/custom-system-services/</guid><description>Custom System Services # You can also create your own system service in Docker Compose format. After creating your own custom service, you can launch it in BurmillaOS in a couple of methods. The service could be directly added to the cloud-config, or a docker-compose.yml file could be saved at a http(s) url location or in a specific directory of BurmillaOS.
Launching Services # Using Cloud-Config # If you want to boot BurmillaOS with a system service running, you can add the service to the cloud-config that is passed to BurmillaOS.</description></item><item><title/><link>https://burmillaos.org/docs/system-services/environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/system-services/environment/</guid><description>Environment # The environment key can be used to customize system services. When a value is not assigned, BurmillaOS looks up the value from the rancher.environment key.
In the example below, ETCD_DISCOVERY will be set to https://discovery.etcd.io/d1cd18f5ee1c1e2223aed6a1734719f7 for the etcd service.
rancher: environment: ETCD_DISCOVERY: https://discovery.etcd.io/d1cd18f5ee1c1e2223aed6a1734719f7 services: etcd: ... environment: - ETCD_DISCOVERY Wildcard globbing is also supported. In the example below, ETCD_DISCOVERY will be set as in the previous example, along with any other environment variables beginning with ETCD_.</description></item><item><title/><link>https://burmillaos.org/docs/system-services/system-docker-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/system-services/system-docker-volumes/</guid><description>System Docker Volumes # A few services are containers in created state. Their purpose is to provide volumes for other services.
user-volumes # Provides user accessible persistent storage directories, used by console service:
/home /opt /var/lib/kubelet If you want to change user-volumes, for example, add /etc/kubernetes directory:
$ sudo ros config set rancher.services.user-volumes.volumes [/home:/home,/opt:/opt,/var/lib/kubelet:/var/lib/kubelet,/etc/kubernetes:/etc/kubernetes] $ sudo reboot Please note that after the restart, the new persistence directory can take effect.</description></item><item><title>Custom BurmillaOS ISO</title><link>https://burmillaos.org/docs/installation/custom-builds/custom-burmillaos-iso/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/custom-builds/custom-burmillaos-iso/</guid><description>Custom BurmillaOS ISO # It&amp;rsquo;s easy to build your own BurmillaOS ISO.
Create a clone of the main BurmillaOS repository to your local machine with a git clone.
$ git clone https://github.com/burmilla/os.git In the root of the repository, the &amp;ldquo;General Configuration&amp;rdquo; section of Dockerfile.dapper can be updated to use custom kernels. After you&amp;rsquo;ve saved your edits, run make in the root directory. After the build has completed, a ./dist/artifacts directory will be created with the custom built BurmillaOS release files.</description></item><item><title>DNS</title><link>https://burmillaos.org/docs/networking/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/networking/dns/</guid><description>Configuring DNS # If you wanted to configure the DNS through the cloud config file, you&amp;rsquo;ll need to place DNS configurations within the rancher key.
#cloud-config #Remember, any changes for rancher will be within the rancher key rancher: network: dns: search: - mydomain.com - example.com Using ros config, you can set the nameservers, and search, which directly map to the fields of the same name in /etc/resolv.conf.
$ sudo ros config set rancher.</description></item><item><title>Google Compute Engine (GCE)</title><link>https://burmillaos.org/docs/installation/cloud/gce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/gce/</guid><description>Google Compute Engine (GCE) # Note: Due to the maximum transmission unit (MTU) of 1460 bytes on GCE, you will need to configure your network interfaces and both the Docker and System Docker to use a MTU of 1460 bytes or you will encounter weird networking related errors.
Adding the BurmillaOS Image into GCE # BurmillaOS is available as an image in GCE, and can be easily run in Google Compute Engine (GCE).</description></item><item><title>iPXE</title><link>https://burmillaos.org/docs/installation/server/pxe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/server/pxe/</guid><description>iPXE # #!ipxe # Boot a persistent BurmillaOS to RAM # Location of Kernel/Initrd images set base-url &amp;lt;url&amp;gt; kernel ${base-url}/vmlinuz rancher.state.dev=LABEL=RANCHER_STATE rancher.state.autoformat=[/dev/sda] rancher.state.wait rancher.cloud_init.datasources=[url:http://example.com/cloud-config] initrd ${base-url}/initrd boot If you want to autoformat the disk when booting by iPXE, you should add the rancher.state.autoformat part to kernel cmdline. However, this does not install the bootloader to disk, so you cannot upgrade BurmillaOS.
If you don&amp;rsquo;t add rancher.state.autoformat, BurmillaOS will run completely in memory, you can execute ros install to install to disk.</description></item><item><title>OpenStack</title><link>https://burmillaos.org/docs/installation/cloud/openstack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/openstack/</guid><description>OpenStack # BurmillaOS releases include an Openstack image that can be found on our releases page. The image format is QCOW3 that is backward compatible with QCOW2.
When launching an instance using the image, you must enable Advanced Options -&amp;gt; Configuration Drive and in order to use a cloud-config file.</description></item><item><title>Proxy Settings</title><link>https://burmillaos.org/docs/networking/proxy-settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/networking/proxy-settings/</guid><description>Configuring Proxy Settings # HTTP proxy settings can be set directly under the network key. This will automatically configure proxy settings for both Docker and System Docker.
#cloud-config rancher: network: http_proxy: https://myproxy.example.com https_proxy: https://myproxy.example.com no_proxy: localhost,127.0.0.1 Note: System Docker proxy settings will not be applied until after a reboot.
To add the HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environment variables to a system service, specify each under the environment key for the service.</description></item><item><title>Using ZFS</title><link>https://burmillaos.org/docs/storage/using-zfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/storage/using-zfs/</guid><description>Using ZFS # Installing the ZFS service # The zfs service will install the kernel-headers for your kernel (if you build your own kernel, you&amp;rsquo;ll need to replicate this service), and then download the ZFS on Linux source, and build and install it. Then it will build a zfs-tools image that will be used to give you access to the zfs tools.
The only restriction is that you must mount your zpool into /mnt, as this is the only shared mount directory that will be accessible throughout the system-docker managed containers (including the console).</description></item><item><title>VMware ESXi</title><link>https://burmillaos.org/docs/installation/cloud/vmware-esxi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://burmillaos.org/docs/installation/cloud/vmware-esxi/</guid><description>VMware ESXi # BurmillaOS automatically detects that it is running on VMware ESXi, and automatically adds the open-vm-tools service to be downloaded and started, and uses guestinfo keys to set the cloud-init data.
BurmillaOS releases anything required for VMware, which includes initrd, a standard ISO for VMware, a vmdk image, and a specific ISO to be used with Docker Machine. The open-vm-tools is built in to BurmillaOS, there is no need to download it.</description></item></channel></rss>